policy_script                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
drop policy if exists "Admins full access adjustments" on "public"."adjustments"; create policy "Admins full access adjustments" on "public"."adjustments" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                            |
drop policy if exists "Lab users adjustments access" on "public"."adjustments"; create policy "Lab users adjustments access" on "public"."adjustments" for ALL to public using (has_role('lab_user'::text)) with check (has_role('lab_user'::text));                                                                                                                                                                                                          |
drop policy if exists "Managers full access adjustments" on "public"."adjustments"; create policy "Managers full access adjustments" on "public"."adjustments" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                                    |
drop policy if exists "lab_user can insert adjustments" on "public"."adjustments"; create policy "lab_user can insert adjustments" on "public"."adjustments" for INSERT to public with check ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                    |
drop policy if exists "lab_user can view adjustments" on "public"."adjustments"; create policy "lab_user can view adjustments" on "public"."adjustments" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                             |
drop policy if exists "Admins full access inventory" on "public"."inventory"; create policy "Admins full access inventory" on "public"."inventory" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                                    |
drop policy if exists "Lab users view inventory" on "public"."inventory"; create policy "Lab users view inventory" on "public"."inventory" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                                                                           |
drop policy if exists "Managers full access inventory" on "public"."inventory"; create policy "Managers full access inventory" on "public"."inventory" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                                            |
drop policy if exists "lab_user can insert inventory row" on "public"."inventory"; create policy "lab_user can insert inventory row" on "public"."inventory" for INSERT to public with check ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                    |
drop policy if exists "lab_user can update inventory qty" on "public"."inventory"; create policy "lab_user can update inventory qty" on "public"."inventory" for UPDATE to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text))))) with check ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                 |
drop policy if exists "lab_user can view inventory" on "public"."inventory"; create policy "lab_user can view inventory" on "public"."inventory" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                                     |
drop policy if exists "Admins full access items" on "public"."items"; create policy "Admins full access items" on "public"."items" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                                                    |
drop policy if exists "Lab users view items" on "public"."items"; create policy "Lab users view items" on "public"."items" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                                                                                           |
drop policy if exists "Managers full access items" on "public"."items"; create policy "Managers full access items" on "public"."items" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                                                            |
drop policy if exists "lab_user can view items" on "public"."items"; create policy "lab_user can view items" on "public"."items" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                                                     |
drop policy if exists "Admins full access locations" on "public"."locations"; create policy "Admins full access locations" on "public"."locations" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                                    |
drop policy if exists "Lab users view locations" on "public"."locations"; create policy "Lab users view locations" on "public"."locations" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                                                                           |
drop policy if exists "Managers full access locations" on "public"."locations"; create policy "Managers full access locations" on "public"."locations" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                                            |
drop policy if exists "Admins full access organizations" on "public"."organizations"; create policy "Admins full access organizations" on "public"."organizations" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                    |
drop policy if exists "Lab users view organizations" on "public"."organizations"; create policy "Lab users view organizations" on "public"."organizations" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                                                           |
drop policy if exists "Managers full access organizations" on "public"."organizations"; create policy "Managers full access organizations" on "public"."organizations" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                            |
drop policy if exists "Admins full access profiles" on "public"."profiles"; create policy "Admins full access profiles" on "public"."profiles" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                                        |
drop policy if exists "Lab users view own profile" on "public"."profiles"; create policy "Lab users view own profile" on "public"."profiles" for SELECT to public using (((id = auth.uid()) AND has_role('lab_user'::text)));                                                                                                                                                                                                                                 |
drop policy if exists "Managers full access profiles" on "public"."profiles"; create policy "Managers full access profiles" on "public"."profiles" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                                                |
drop policy if exists "Users can update own profile" on "public"."profiles"; create policy "Users can update own profile" on "public"."profiles" for UPDATE to public using ((id = auth.uid())) with check ((id = auth.uid()));                                                                                                                                                                                                                               |
drop policy if exists "lab_user can view profiles" on "public"."profiles"; create policy "lab_user can view profiles" on "public"."profiles" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                                         |
drop policy if exists "Admins full access purchase_order_lines" on "public"."purchase_order_lines"; create policy "Admins full access purchase_order_lines" on "public"."purchase_order_lines" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                        |
drop policy if exists "Lab users view purchase_order_lines" on "public"."purchase_order_lines"; create policy "Lab users view purchase_order_lines" on "public"."purchase_order_lines" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                               |
drop policy if exists "Managers full access purchase_order_lines" on "public"."purchase_order_lines"; create policy "Managers full access purchase_order_lines" on "public"."purchase_order_lines" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                |
drop policy if exists "lab_user can update PO lines (receive)" on "public"."purchase_order_lines"; create policy "lab_user can update PO lines (receive)" on "public"."purchase_order_lines" for UPDATE to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text))))) with check ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text))))); |
drop policy if exists "lab_user can update qty_received" on "public"."purchase_order_lines"; create policy "lab_user can update qty_received" on "public"."purchase_order_lines" for UPDATE to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text))))) with check ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));             |
drop policy if exists "lab_user can view PO lines" on "public"."purchase_order_lines"; create policy "lab_user can view PO lines" on "public"."purchase_order_lines" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                                 |
drop policy if exists "lab_user can view purchase order lines" on "public"."purchase_order_lines"; create policy "lab_user can view purchase order lines" on "public"."purchase_order_lines" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                         |
drop policy if exists "Admins full access purchase_orders" on "public"."purchase_orders"; create policy "Admins full access purchase_orders" on "public"."purchase_orders" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                            |
drop policy if exists "Lab users update purchase_orders" on "public"."purchase_orders"; create policy "Lab users update purchase_orders" on "public"."purchase_orders" for UPDATE to public using (has_role('lab_user'::text)) with check (has_role('lab_user'::text));                                                                                                                                                                                       |
drop policy if exists "Lab users view purchase_orders" on "public"."purchase_orders"; create policy "Lab users view purchase_orders" on "public"."purchase_orders" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                                                   |
drop policy if exists "Managers full access purchase_orders" on "public"."purchase_orders"; create policy "Managers full access purchase_orders" on "public"."purchase_orders" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                    |
drop policy if exists "lab_user can view purchase orders" on "public"."purchase_orders"; create policy "lab_user can view purchase orders" on "public"."purchase_orders" for SELECT to public using ((EXISTS ( SELECT 1
   FROM user_roles ur
  WHERE ((ur.id = auth.uid()) AND (ur.role = 'lab_user'::text)))));                                                                                                                                             |
drop policy if exists "Admins full access vendors" on "public"."vendors"; create policy "Admins full access vendors" on "public"."vendors" for ALL to public using (has_role('admin'::text)) with check (has_role('admin'::text));                                                                                                                                                                                                                            |
drop policy if exists "Lab users view vendors" on "public"."vendors"; create policy "Lab users view vendors" on "public"."vendors" for SELECT to public using (has_role('lab_user'::text));                                                                                                                                                                                                                                                                   |
drop policy if exists "Managers full access vendors" on "public"."vendors"; create policy "Managers full access vendors" on "public"."vendors" for ALL to public using (has_role('manager'::text)) with check (has_role('manager'::text));                                                                                                                                                                                                                    |